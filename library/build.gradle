apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion


    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    api "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    api "com.android.support:support-fragment:$rootProject.ext.supportLibraryVersion"
    api "com.android.support:design:$rootProject.ext.supportLibraryVersion"
    api "com.android.support:recyclerview-v7:$rootProject.ext.supportLibraryVersion"
    api "com.android.support:cardview-v7:$rootProject.ext.supportLibraryVersion"
    api "com.android.support.constraint:constraint-layout:$rootProject.ext.constraintLayoutVersion"
    api "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    //数据存储
    api "android.arch.persistence.room:runtime:$rootProject.ext.roomVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$rootProject.ext.roomVersion"
    api "android.arch.persistence.room:rxjava2:$rootProject.ext.roomVersion"

    //生命周期
    api "android.arch.lifecycle:extensions:$rootProject.archLifecycleVersion"
    annotationProcessor "android.arch.lifecycle:compiler:$rootProject.archLifecycleVersion"
    kapt "android.arch.lifecycle:compiler:$rootProject.archLifecycleVersion"

    //tinker
    api "com.android.support:multidex:$rootProject.ext.multidexVersion"
    api("com.tencent.tinker:tinker-android-lib:$rootProject.ext.tinkerVersion")
    annotationProcessor("com.tencent.tinker:tinker-android-anno:$rootProject.ext.tinkerVersion") { changing = true }
    api("com.tencent.tinker:tinker-android-anno:$rootProject.ext.tinkerVersion") { changing = true }

    //友盟统计
    api "com.umeng.analytics:analytics:$rootProject.ext.umengAnalyticsVersion"
    api "com.github.bumptech.glide:glide:$rootProject.ext.glideVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.ext.glideVersion"
    api "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofitVersion"
    api "com.squareup.retrofit2:converter-gson:$rootProject.ext.retrofitVersion"
    api "com.squareup.retrofit2:adapter-rxjava2:$rootProject.ext.retrofitVersion"
    api "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.okhttpVersion"
    api "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxjava2Version"
    api "com.jakewharton:butterknife:$rootProject.ext.butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.ext.butterKnifeVersion"
    api "com.jakewharton.rxbinding2:rxbinding:$rootProject.ext.rxBindingVersion"
    api "com.facebook.stetho:stetho:$rootProject.ext.stethoVersion"
    api "com.facebook.stetho:stetho-okhttp3:$rootProject.ext.stethoVersion"

    //优化
    debugApi "com.squareup.leakcanary:leakcanary-android:$rootProject.ext.leakCanaryVersion"
    releaseApi "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.ext.leakCanaryVersion"

    //测试
    testApi "junit:junit:$rootProject.ext.junitVersion"
    androidTestApi("com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

}

def sdk_appendix = "baselib"
def sdk_baseName = "component"
def sdk_version = "0.0.2"

task buildJar(dependsOn: ['compileReleaseJavaWithJavac'], type: Jar) {

    appendix = sdk_appendix
    baseName = sdk_baseName
    version = sdk_version
    //classifier = "release"
    //后缀名
    extension = "jar"
    //最终的Jar 包名 ， 如果没设置 ， 默认为[baseName] - [appendix] - [version] - [classifier].[extension]

    // 需打包的资源所在的路径集
    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
    //初始化资源路径集
    from srcClassDir

    //排除这两个文件
    include("com/smartstudy/uskid/**/*.class")
    exclude("com/smartstudy/uskid/library/BuildConfig.class",
            "com/smartstudy/uskid/library/R.class",
            "com/smartstudy/uskid/library/R\$*.class")
}

task buildJarAndCopy(dependsOn: "buildJar", type: Copy) {
    from(project.buildDir.absolutePath + "/libs")
    include(sdk_baseName + "-" + sdk_appendix + "-" + sdk_version + ".jar")
    into("release")
}

